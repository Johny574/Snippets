{
	"Debugger Log": {
		"scope": "csharp",
		"prefix": "-log",
		"body": [
			"Debug.Log($1);"
		],
		"description": "Log output to debugger"
	},

	"Log nuts": {
		"scope": "csharp",
		"prefix": "-lognuts",
		"body": [
			"Debug.Log(\"Deesnuts\");"
		],
		"description": "Log dees nuts"
	},

	"Start": {
		"scope": "csharp",
		"prefix": "-start",
		"body": [
			"void Start()",
			"{",
			"\t$1",
			"}"
		],
		"description": "Start method."
	},

	"Awake": {
		"scope": "csharp",
		"prefix": "-awake",
		"body": [
			"void Awake()",
			"{",
			"\t$1",
			"}"
		],
		"description": "Awake method."
	},

	"Update": {
		"scope": "csharp",
		"prefix": "-update",
		"body": [
			"void Update()",
			"{",
			"\t$1",
			"}"
		],
		"description": "Update method."
	},

	"Enable": {
		"scope": "csharp",
		"prefix": "-enable",
		"body": [
			"void OnEnable()",
			"{",
			"\t$1",
			"}"
		],
		"description": "OnEnable method."
	},

	"Disable": {
		"scope": "csharp",
		"prefix": "-disable",
		"body": [
			"void OnDisable()",
			"{",
			"\t$1",
			"}"
		],
		"description": "OnDisable method."
	},

	"Trigger Enter": {
		"scope": "csharp",
		"prefix": "-trigger-enter",
		"body": [
			"public void OnTriggerEnter(Collider col)",
			"{",
			"\t$1",
			"}"
		],
		"description": "Trigger enter."
	},

	"Trigger Exit": {
		"scope": "csharp",
		"prefix": "-trigger-exit",
		"body": [
			"public void OnTriggerExit(Collider col)",
			"{",
			"\t$1",
			"}"
		],
		"description": "Trigger exit."
	},

	"Trigger Stay": {
		"scope": "csharp",
		"prefix": "-trigger-stay",
		"body": [
			"public void OnTriggerStay(Collider col)",
			"{",
			"\t$1",
			"}"
		],
		"description": "Trigger stay."
	},

	"Collision Enter": {
		"scope": "csharp",
		"prefix": "-col-enter",
		"body": [
			"public void OnCollisionEnter(Collision col)",
			"{",
			"\t$1",
			"}"
		],
		"description": "Collision enter."
	},

	"Collision Exit": {
		"scope": "csharp",
		"prefix": "-col-exit",
		"body": [
			"public void OnCollisionExit(Collision col)",
			"{",
			"\t$1",
			"}"
		],
		"description": "Collision exit."
	},

	"Collision Stay": {
		"scope": "csharp",
		"prefix": "-col-stay",
		"body": [
			"public void OnCollisionStay(Collision col)",
			"{",
			"\t$1",
			"}"
		],
		"description": "Collision stay."
	},
	
	"Class": {
		"scope": "csharp",
		"prefix": "-class",
		"body": [
			"public class $1 : $2",
			"{",
			"\t$3",
			"}"
		],
		"description": "Create new class."
	},

	"Interface": {
		"scope": "csharp",
		"prefix": "-interface",
		"body": [
			"public interface $1",
			"{",
			"\t$2",
			"}"
		],
		"description": "Interface."
	},
	
	"Backing field": {
		"scope": "csharp",
		"prefix": "-b-field",
		"body": [
			"[field:SerializeField]"
		],
		"description": "Backing field."
	},

	"Backing field properties": {
		"scope": "csharp",
		"prefix": "-getset",
		"body": [
			"{ get; private set; }"
		],
		"description": "Backing field properties."
	},

	"Singleton": {
		"scope": "csharp",
		"prefix": "-singleton",
		"body": [
			"public class $1 : MonoBehaviour",
			"{",
			"\tpublic static $1 Instance;",
			"",
			"\tvoid Awake()",
			"\t{",
			"\t\tif (Instance == null) { Instance = this; }",
			"\t}",
			"}"
		],
		"description": "Singleton."
	},

	"SetUp": {
		"scope": "csharp",
		"prefix": "-setup",
		"body": [
			"[UnitySetUp]",
			"public IEnumerator SetUp()",
			"{",
			"\t$1",
			"\tyield return null",
			"}"
		],
		"description": "Setup method."
	},

	"TearDown": {
		"scope": "csharp",
		"prefix": "-teardown",
		"body": [
			"[UnityTearDown]",
			"public IEnumerator TearDown()",
			"{",
			"\t$1",
			"\tyield return null",
			"}"
		],
		"description": "Teardown method."
	},

	"Test": {
		"scope": "csharp",
		"prefix": "-test",
		"body": [
			"[UnityTest]",
			"public IEnumerator $1()",
			"{",
			"\tAssert.IsTrue(false);$2",
			"\tyield return null;",
			"}"
		],
		"description": "Test method."
	}
}